<?php

declare(strict_types=1);

use App\Services\TwilioService;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Support\Facades\Cache;
use Mockery\MockInterface;
use PHPUnit\Framework\Attributes\DataProvider;
use PHPUnit\Framework\Attributes\Test;
use Tests\TestCase;
use Tests\Traits\InteractsWithFixtures;
use Twilio\Http\Response;
use Twilio\Rest\Client;

class TwilioServiceUnitTest extends TestCase
{

    use WithFaker;
    use InteractsWithFixtures;

    private TwilioService $service;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->service = resolve(TwilioService::class);
    }

    #[Test]
    #[DataProvider('phoneNumberProvider')]
    public function normalizePhoneNumber($input, $expected): void
    {
        $this->assertEquals($expected, $this->service->normalizePhoneNumber($input));
    }

    #[Test]
    public function e164PhoneNumber(): void
    {
        $this->assertEquals(
            "18888675309",
            $this->service->e164Format("8888675309")
        );
    }

    #[Test]
    public function hasCachedResponse(): void
    {
        $number = $this->faker->e164PhoneNumber;
        $hash = $this->service->getCacheKey($number);
        $this->assertFalse($this->service->hasCachedResponseFor($number));
        Cache::put($hash, []);
        $this->assertTrue($this->service->hasCachedResponseFor($number));
    }

    #[Test]
    public function computesCacheKeysCorrectly(): void
    {
        $number = $this->faker->e164PhoneNumber;
        $hash = sha1($number);
        $this->assertEquals(
            "twilio.lookups.$hash",
            $this->service->getCacheKey($number)
        );
    }

    #[Test]
    public function respectsCacheBust(): void
    {
        Cache::partialMock()->shouldReceive('forever')->once();
        $service = $this->partialMock(TwilioService::class, function(MockInterface $mock){
            //fake cache prime
            $mock->shouldReceive('hasCachedResponseFor')
               ->with($this->anything())
               ->andReturn(true)
               ->once();
            //fake twilio response
           $mock->shouldReceive('getTwilioInformationForPhoneNumber')
               ->with($this->anything())
               ->andReturn(static::getFixtureData('twilio_responses/v1/white-house.json'))
               ->once();
        });
        $service->lookupNumber($this->faker->e164PhoneNumber, true);
    }

    #[Test]
    public function doesntCallLookupIfCached(): void
    {
        Cache::partialMock()
            ->shouldReceive('has')
            ->andReturn(true)
            ->once();
        //fake cache get to return real data so nothing breaks
        Cache::partialMock()
            ->shouldReceive('get')
            ->andReturn(static::getFixtureData('twilio_responses/v1/white-house.json'))
            ->once();
        $this->service->lookupNumber($this->faker->e164PhoneNumber);
    }

    #[Test]
    public function sendsRequestsToTwilio(): void
    {
        $phoneNumber = $this->service->normalizePhoneNumber($this->faker->e164PhoneNumber);
        $clientMock = $this->mock(Client::class, function (MockInterface $mock) use ($phoneNumber) {

            $mock->shouldReceive('request')
                ->withSomeOfArgs('GET', "https://lookups.twilio.com/v1/PhoneNumbers/$phoneNumber", [
                    'Type' => ['carrier', 'caller-name'],
                    'AddOns' => ['ekata_reverse_phone'],
                ])
                ->andReturn(new Response(200, '{}', null))->once();
        });
        (new TwilioService($clientMock))->getTwilioInformationForPhoneNumber($phoneNumber);
    }

    #[Test]
    #[DataProvider('phoneLookupResultProvider')]
    public function extractsDataCorrectly(
        array   $data,
        string  $name,
        ?string $carrier,
        ?string $type,
        ?string $country
    ): void
    {
        $result = $this->service->extractData($data);
        $this->assertEquals($name, $result['possible_owners']['name']);
        $this->assertEquals($carrier, $result['carrier']);
        $this->assertEquals($type, $result['type']);
        $this->assertEquals($country, $result['country']);
    }

    #[Test]
    #[DataProvider('smsLookupResultProvider')]
    public function convertsDataToEnglishForSMS(
        array  $data,
        string $response,
    ): void
    {
        $extracted = $this->service->extractData($data);
        $sms = $this->service->toSms($extracted);
        $this->assertEquals($response, $sms);
    }

    public static function getSMSFixture(string $name, string $path): array
    {
        $formattedResponsePath = str_replace(
            'twilio_responses/v1',
            'sms_formatted_responses',
            $path
        );
        $formattedResponsePath = str_replace('.json', '.txt', $formattedResponsePath);

        return [
            $name => [
                "data" => self::getFixtureData($path),
                "response" => self::getFixtureContents($formattedResponsePath),
            ]
        ];
    }

    public static function smsLookupResultProvider(): array
    {
        return collect()
            ->merge(static::getSMSFixture("the white house", 'twilio_responses/v1/white-house.json'))
            ->merge(static::getSMSFixture("fcc toll free", 'twilio_responses/v1/fcc-toll-free.json'))
            ->merge(static::getSMSFixture('anonymized personal', 'twilio_responses/v1/anonymized-person.json'))
            ->toArray();
    }

    public static function phoneLookupResultProvider(): array
    {
        return [
            'the white house' => [
                "data" => self::getFixtureData('twilio_responses/v1/white-house.json'),
                "name" => "White House Associates",
                "carrier" => "Verizon",
                "type" => "landline",
                "country" => "US",
            ],
            'fcc toll free' => [
                self::getFixtureData('twilio_responses/v1/fcc-toll-free.json'),
                "name" => "United States Government, Federal Communications Commission",
                "carrier" => null,
                "type" => null,
                "country" => "US",
            ],
            'anonymized personal' => [
                self::getFixtureData('twilio_responses/v1/anonymized-person.json'),
                "name" => "John G Doe",
                "carrier" => "T-Mobile USA, Inc.",
                "type" => "mobile",
                "country" => "US",
            ],
        ];
    }

    public static function phoneNumberProvider(): array
    {
        return [
            "spaces" => [
                "input" => "888 867 5309",
                "expected" => "18888675309"
            ],
            "country code + spaces" => [
                "input" => "+1 999 123 4567",
                "expected" => "19991234567"
            ],
            "dashes" => [
                "input" => "888-123-4567",
                "expected" => "18881234567"
            ],
            "country code + dashes" => [
                "input" => "+1-999-123-4567",
                "expected" => "19991234567"
            ],
            "parentheses" => [
                "input" => "(888) 123-4567",
                "expected" => "18881234567"
            ],
            "country code + parentheses" => [
                "input" => "+1 (999) 123-4567",
                "expected" => "19991234567"
            ],
            "parentheses + dashes" => [
                "input" => "(888) 123-4567",
                "expected" => "18881234567"
            ],
            "country code + parentheses + dashes" => [
                "input" => "+1 (999) 123-4567",
                "expected" => "19991234567"
            ],
            "parentheses + spaces" => [
                "input" => "(888) 123 4567",
                "expected" => "18881234567"
            ],
        ];
    }
}
